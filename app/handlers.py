from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import app.keyboards.start_keyboard as kb
from app.static_files.bot_answers import GREETINGS
from app.workTools.WorkWithDB import WorkWithDB
from app.workTools.WorkWithTTS import WorkWithTTS

class Flag(StatesGroup):
    presentation_text = State()
    qa_text = State()

router = Router()

@router.message(Command('start'))
async def cmd_start(msg: Message):
    from app.new_voice_handler import chat_lang
    chat_lang.pop(msg.chat.id, None)
    await msg.answer(GREETINGS, reply_markup=kb.lang_menu)

@router.callback_query(F.data.startswith('set_lang:'))
async def set_lang(c: CallbackQuery):
    from app.new_voice_handler import chat_lang
    lang = c.data.split(':')[1]
    chat_lang[c.message.chat.id] = lang
    confirm = {'ru':'‚úÖ –†—É—Å—Å–∫–∏–π','en':'‚úÖ English','cn':'‚úÖ ‰∏≠Êñá'}[lang]
    await c.message.edit_text(confirm, reply_markup=kb.start)

@router.callback_query(F.data == 'performance')
async def show_intro(c: CallbackQuery):
    from app.new_voice_handler import chat_lang
    text = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –≤–∞—à –ò–ò‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ VTOL‚Äë–¥—Ä–æ–Ω–∞–º. –í–æ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ CW-15.'
    audio = WorkWithTTS.text_to_speech(text, chat_lang.get(c.message.chat.id, 'ru'))
    await c.message.answer_audio(audio=audio)
    await c.message.answer(text, reply_markup=kb.back_to_start)

@router.callback_query(F.data == 'features')
async def show_feats(c: CallbackQuery):
    data = WorkWithDB.show_characteristics('JOUAV CW-15')
    p = data.get('performance', {})
    out = (
        f"üèéÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å: {p.get('max_speed_kmh','?')} –∫–º/—á\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–ª—ë—Ç–∞: {p.get('flight_time_min','?')} –º–∏–Ω\n"
        f"üì∂ –†–∞–¥–∏—É—Å: {p.get('max_range_km','?')} –∫–º"
    )
    await c.message.answer(out, reply_markup=kb.back_to_start)

@router.callback_query(F.data == 'certificate')
async def show_cert(c: CallbackQuery):
    docs = WorkWithDB.show_characteristics('JOUAV CW-15').get('compliance_documents', [])
    await c.message.answer('üõÇ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n' + '\n'.join(docs), reply_markup=kb.back_to_start)

@router.callback_query(F.data == 'question')
async def ask_qa(c: CallbackQuery, state: FSMContext):
    await state.set_state(Flag.qa_text)
    await c.message.answer('‚ùì –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º.', reply_markup=kb.back_to_start)

@router.message(Flag.qa_text)
async def handle_qa(m: Message, state: FSMContext):
    from app.new_voice_handler import chat_lang
    lang = chat_lang.get(m.chat.id, 'ru')
    await state.clear()
    answer = f"–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: {m.text}\n(–∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç LLM)"
    await m.answer(answer, reply_markup=kb.start)

@router.callback_query(F.data == 'voiceActing')
async def ask_tts(c: CallbackQuery, state: FSMContext):
    await state.set_state(Flag.presentation_text)
    await c.message.answer('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏.', reply_markup=kb.back_to_start)

@router.message(Flag.presentation_text)
async def gen_tts(m: Message, state: FSMContext):
    from app.new_voice_handler import chat_lang
    text = m.text or ''
    await state.clear()
    audio = WorkWithTTS.text_to_speech(text, chat_lang.get(m.chat.id, 'ru'))
    await m.answer_audio(audio=audio)
    await m.answer(GREETINGS, reply_markup=kb.start)
