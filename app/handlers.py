import httpx

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, BufferedInputFile, InputMediaAudio, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from config import OPENROUTER_API_KEY

from keyboards.start_keyboard import lang_menu, back_to_start, start_kb
import keyboards.drone_presentation as kb
from static_files.bot_answers import GREETINGS, PRESENTAION_VTOL_DRONES, CERTIFICATE, FEATURES

from workTools.WorkWithDB import WorkWithDB
from workTools.WorkWithTTS import WorkWithTTS
from workTools.WorkWithLLM import MistralAPI
from workTools.WorkWithCache import WorkWithCache

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Flag(StatesGroup):
    awaiting_question = State()
    awaiting_tts_text = State()

router = Router()

@router.message(Command('start'))
async def cmd_start(msg: Message):
    from new_voice_handler import chat_lang
    chat_lang.pop(msg.chat.id, None)
    await msg.answer(GREETINGS, reply_markup=lang_menu)

@router.callback_query(F.data.startswith('set_lang:'))
async def set_lang(c: CallbackQuery):
    from new_voice_handler import chat_lang
    lang = c.data.split(':')[1]
    chat_lang[c.message.chat.id] = lang
    confirm = {'ru':'‚úÖ –†—É—Å—Å–∫–∏–π','en':'‚úÖ English','cn':'‚úÖ ‰∏≠Êñá'}[lang]
    await c.message.edit_text(confirm, reply_markup = await start_kb(chat_lang.get(c.message.chat.id, 'ru')))

@router.callback_query(F.data == 'performance')
@router.callback_query(F.data.startswith("presentaion_"))
async def show_intro(c: CallbackQuery, bot: Bot):
    from new_voice_handler import chat_lang
    cache_key = c.data + chat_lang.get(c.message.chat.id, 'ru') if not c.data == 'performance' else 'presentaion' + chat_lang.get(c.message.chat.id, 'ru')
    check_key = WorkWithCache.check_key(cache_key)
    if check_key:
        print("–î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞")
        print(cache_key)
        audio_bytes, text = WorkWithCache.get_cache(cache_key)
    else:
        print("–î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑ –∫—ç—à–∞")
        if c.data == 'performance':
            text = await MistralAPI.query(prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ {chat_lang.get(c.message.chat.id, 'ru')} {PRESENTAION_VTOL_DRONES}", token = OPENROUTER_API_KEY)
        else:
            text = await MistralAPI.query(prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥—Ä–æ–Ω–∞ (—á—Ç–æ–±—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É –≤–º–µ—Å—Ç–∏–ª–æ—Å—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º) {c.data.split('_')[1]} –Ω–∞ {chat_lang.get(c.message.chat.id, 'ru')} —è–∑—ã–∫–µ ", token = OPENROUTER_API_KEY)
        audio_bytes = await WorkWithTTS.text_to_speech(task = cache_key, text = text, lang = chat_lang.get(c.message.chat.id, 'ru'))

    audio = BufferedInputFile(file = audio_bytes, filename = "voice.mp3")

    await bot.edit_message_media(
            chat_id = c.message.chat.id,
            message_id = c.message.message_id,
            media = InputMediaAudio(
                media = audio,
                caption = text
            ),
            reply_markup = await kb.inline_words_phrases() # back_to_start_delete 
        )

@router.callback_query(F.data == 'backStartDelete')
async def back_to_start(c: CallbackQuery):
    from new_voice_handler import chat_lang
    lang = chat_lang[c.message.chat.id]
    confirm = {'ru':'‚úÖ –†—É—Å—Å–∫–∏–π','en':'‚úÖ English','cn':'‚úÖ ‰∏≠Êñá'}[lang]
    await c.message.delete()
    await c.message.answer(confirm, reply_markup = await start_kb(chat_lang.get(c.message.chat.id, 'ru')))

@router.callback_query(F.data=='features')
async def show_feats(c: CallbackQuery):
    from new_voice_handler import chat_lang
    data = WorkWithDB.show_characteristics('JOUAV CW-15')
    p = data.get('performance', {})
    features = FEATURES[chat_lang.get(c.message.chat.id, 'ru')]
    out = (
        f"üèéÔ∏è {features[0][0]} {p.get('max_speed_kmh','?')} {features[0][1]}\n"
        f"‚è±Ô∏è {features[1][0]} {p.get('flight_time_min','?')} {features[1][1]}\n"
        f"üì∂ {features[2][0]} {p.get('max_range_km','?')} {features[2][1]}"
    )
    await c.message.answer(out) # reply_markup=back_to_start

@router.callback_query(F.data=='certificate')
async def show_cert(c: CallbackQuery):
    from new_voice_handler import chat_lang
    certificate = CERTIFICATE[chat_lang.get(c.message.chat.id, 'ru')]
    docs = WorkWithDB.show_characteristics('JOUAV CW-15').get('compliance_documents', [])
    await c.message.answer(f'üõÇ {certificate}\n' + '\n'.join(docs)) # reply_markup=back_to_start

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º Q&A
@router.callback_query(F.data=='question')
async def enter_qa(c: CallbackQuery, state: FSMContext):
    await state.set_state(Flag.awaiting_question) 
    await c.message.answer('–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º.') # reply_markup=back_to_start

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ MistralAPI
@router.message(Flag.awaiting_question)
async def handle_question(m: Message, state: FSMContext):
    await state.clear()
    user_question = m.text.strip()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ë–î
    db = WorkWithDB.load_all()  # –≤–µ—Ä–Ω—ë—Ç dict {name: specs}
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–ø–µ—Ä–ª–∞—Ç–∏–≤–æ–≤
    uq = user_question.lower()
    if '—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π' in uq:
        best = max(db.items(), key=lambda item: item[1].get('performance', {}).get('max_speed_kmh', 0)) #item: item[1]['performance'].get('max_speed_kmh', 0)
        name, specs = best
        speed = specs['performance']['max_speed_kmh'] 
        await m.answer(f"üöÄ –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –¥—Ä–æ–Ω: {name} ‚Äî {speed} –∫–º/—á.") # reply_markup=back_to_start
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    context = ' '.join(
        # f"{name}: payload {info['weights']['max_payload_kg']}kg, speed {info['performance']['max_speed_kmh']}km/h;"
        f"{name}: payload {info.get('weights', {}).get('max_payload_kg', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}kg, speed {info.get('performance', {}.get('max_speed_kmh', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'))}km/h;"
        for name, info in db.items()
    )
    # –ó–∞–ø—Ä–æ—Å –∫ MistralAPI
    prompt = f"Context: {context}\nQuestion: {user_question}"
    answer = await MistralAPI.query(prompt = prompt, token = OPENROUTER_API_KEY)

    await m.answer(f"‚ùì {user_question}\n\nüí¨ {answer}") # reply_markup=back_to_start

# –û–∑–≤—É—á–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@router.callback_query(F.data=='voiceActing')
async def ask_tts(c: CallbackQuery, state: FSMContext):
    await state.set_state(Flag.awaiting_tts_text)
    await c.message.answer('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏.', reply_markup=back_to_start)

@router.message(Flag.awaiting_tts_text)
async def gen_tts(m: Message, state: FSMContext):
    from new_voice_handler import chat_lang
    text = m.text or ''
    await state.clear()
    audio = WorkWithTTS.text_to_speech(text, chat_lang.get(m.chat.id, 'ru'))
    await m.answer_audio(audio=audio, reply_markup=back_to_start)
