
import httpx
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards.start_keyboard import lang_menu, start, back_to_start
from static_files.bot_answers import GREETINGS
from workTools.WorkWithDB import WorkWithDB
from workTools.WorkWithTTS import WorkWithTTS
from workTools.WorkWithLLM import MistralAPI

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Flag(StatesGroup):
    awaiting_question = State()
    awaiting_tts_text = State()

router = Router()

@router.message(Command('start'))
async def cmd_start(msg: Message):
    from new_voice_handler import chat_lang
    chat_lang.pop(msg.chat.id, None)
    await msg.answer(GREETINGS, reply_markup=lang_menu)

@router.callback_query(F.data.startswith('set_lang:'))
async def set_lang(c: CallbackQuery):
    from new_voice_handler import chat_lang
    lang = c.data.split(':')[1]
    chat_lang[c.message.chat.id] = lang
    confirm = {'ru':'‚úÖ –†—É—Å—Å–∫–∏–π','en':'‚úÖ English','cn':'‚úÖ ‰∏≠Êñá'}[lang]
    await c.message.edit_text(confirm, reply_markup=start)

@router.callback_query(F.data=='performance')
async def show_intro(c: CallbackQuery):
    from new_voice_handler import chat_lang
    text = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –≤–∞—à –ò–ò‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ VTOL‚Äë–¥—Ä–æ–Ω–∞–º. –í–æ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.'
    audio = WorkWithTTS.text_to_speech(text, chat_lang.get(c.message.chat.id, 'ru'))
    await c.message.answer_audio(audio=audio)
    await c.message.answer(text, reply_markup=back_to_start)

@router.callback_query(F.data=='features')
async def show_feats(c: CallbackQuery):
    data = WorkWithDB.show_characteristics('JOUAV CW-15')
    p = data.get('performance', {})
    out = (
        f"üèéÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å: {p.get('max_speed_kmh','?')} –∫–º/—á\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–ª—ë—Ç–∞: {p.get('flight_time_min','?')} –º–∏–Ω\n"
        f"üì∂ –†–∞–¥–∏—É—Å: {p.get('max_range_km','?')} –∫–º"
    )
    await c.message.answer(out, reply_markup=back_to_start)

@router.callback_query(F.data=='certificate')
async def show_cert(c: CallbackQuery):
    docs = WorkWithDB.show_characteristics('JOUAV CW-15').get('compliance_documents', [])
    await c.message.answer('üõÇ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n' + '\n'.join(docs), reply_markup=back_to_start)

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º Q&A
@router.callback_query(F.data=='question')
async def enter_qa(c: CallbackQuery, state: FSMContext):
    await state.set_state(Flag.awaiting_question)
    await c.message.answer('‚ùì –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º.', reply_markup=back_to_start)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ MistralAPI
@router.message(Flag.awaiting_question)
async def handle_question(m: Message, state: FSMContext):
    await state.clear()
    user_question = m.text.strip()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ë–î
    db = WorkWithDB.load_all()  # –≤–µ—Ä–Ω—ë—Ç dict {name: specs}
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–ø–µ—Ä–ª–∞—Ç–∏–≤–æ–≤
    uq = user_question.lower()
    if '—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π' in uq:
        best = max(db.items(), key=lambda item: item[1]['performance'].get('max_speed_kmh', 0))
        name, specs = best
        speed = specs['performance']['max_speed_kmh']
        await m.answer(f"üöÄ –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –¥—Ä–æ–Ω: {name} ‚Äî {speed} –∫–º/—á.", reply_markup=back_to_start)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    context = ' '.join(
        f"{name}: payload {info['weights']['max_payload_kg']}kg, speed {info['performance']['max_speed_kmh']}km/h;"
        for name, info in db.items()
    )
    # –ó–∞–ø—Ä–æ—Å –∫ MistralAPI
    prompt = f"Context: {context}\nQuestion: {user_question}"
    answer = await MistralAPI.query(prompt)

    await m.answer(f"‚ùì {user_question}\n\nüí¨ {answer}", reply_markup=back_to_start)

# –û–∑–≤—É—á–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@router.callback_query(F.data=='voiceActing')
async def ask_tts(c: CallbackQuery, state: FSMContext):
    await state.set_state(Flag.awaiting_tts_text)
    await c.message.answer('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏.', reply_markup=back_to_start)

@router.message(Flag.awaiting_tts_text)
async def gen_tts(m: Message, state: FSMContext):
    from new_voice_handler import chat_lang
    text = m.text or ''
    await state.clear()
    audio = WorkWithTTS.text_to_speech(text, chat_lang.get(m.chat.id, 'ru'))
    await m.answer_audio(audio=audio, reply_markup=back_to_start)
