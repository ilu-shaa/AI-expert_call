#–ï–©–ï –í –ü–†–û–¶–ï–°–°–ï–ï
import httpx
from app.config import MISTRAL_API_URL, MISTRAL_API_KEY
import os
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

qa_router = Router()

# 1. –®–∞–±–ª–æ–Ω—ã 15 —Ç–∏–ø–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
TYPICAL_QUESTIONS = [
    "–ö–∞–∫–æ–≤–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ–ª—ë—Ç–∞?",
    "–ö–∞–∫—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?",
    "–ö–∞–∫–æ–≤ —Ä–∞–±–æ—á–∏–π —Ä–∞–¥–∏—É—Å (–¥–∞–ª—å–Ω–æ—Å—Ç—å) –ø–æ–ª—ë—Ç–∞?",
    "–ö–∞–∫–æ–≤–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏ –∫—Ä–µ–π—Å–µ—Ä—Å–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å?",
    "–ö–∞–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –±–∞—Ç–∞—Ä–µ–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è?",
    "–ü—Ä–∏ –∫–∞–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è?",
    "–ö–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã —Å–≤—è–∑–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏?",
    "–ï—Å—Ç—å –ª–∏ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç –∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ö–æ–¥–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π?",
    "–ö–∞–∫–∏–µ –≤–∏–¥—ã –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è?",
    "–ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ –∏ –ø–æ—Å–∞–¥–∫–∞?",
    "–ö–∞–∫–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã?",
    "–ö–∞–∫–æ–≤–∞ –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —É—Å–ª–æ–≤–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏?",
    "–ö–∞–∫–∏–µ —Å—Ö–µ–º—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã?",
    "–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –≤—ã–ª–µ—Ç—É?",
    "–ö–∞–∫–æ–≤–∞ –≥–∞—Ä–∞–Ω—Ç–∏—è –∏ —Ä–µ—Å—É—Ä—Å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤/–º–æ—Ç–æ—Ä–æ–≤?"
]

# 2. –ö–Ω–æ–ø–æ—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
def build_qa_kb():
    kb = InlineKeyboardMarkup(row_width=1)
    for idx, q in enumerate(TYPICAL_QUESTIONS, 1):
        kb.add(InlineKeyboardButton(f"{idx}. {q}", callback_data=f"qa:{idx-1}"))
    return kb

# 3. –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
@qa_router.message(Command("questions"))
async def send_questions(msg):
    kb = build_qa_kb()
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:", reply_markup=kb)

# 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
@qa_router.callback_query(F.data.startswith("qa:"))
async def handle_qa(c: CallbackQuery):
    idx = int(c.data.split(":", 1)[1])
    question = TYPICAL_QUESTIONS[idx]
    await c.answer()  
    await c.message.edit_reply_markup()  

    prompt = (
        f"–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ VTOL‚Äë–¥—Ä–æ–Ω–∞–º –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞.\n"
        f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–ø—Ä–æ—Å: ¬´{question}¬ª\n"
        f"–î–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, "
        f"–æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."
    )
    answer = await ask_llm(prompt)
    await c.message.answer(f"‚ùì {question}\n\nüí¨ {answer}")

# 5. –§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ LLM —á–µ—Ä–µ–∑ HTTP API
async def ask_llm(prompt: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç prompt –∑–∞–ø—Ä–æ—Å–æ–º –∫ Mistral Inference API v1 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.
    """
    headers = {
        "Authorization": f"Bearer {MISTRAL_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {
        "prompt": prompt,
        "max_new_tokens": 200,
        "temperature": 0.7,
    }
    async with httpx.AsyncClient(timeout=15.0) as client:
        resp = await client.post(MISTRAL_API_URL, json=payload, headers=headers)
        resp.raise_for_status()
        data = resp.json()

    choices = data.get("choices", [])
    if not choices:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
    return choices[0].get("text", "").strip()


