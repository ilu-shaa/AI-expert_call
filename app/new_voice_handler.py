import os
import tempfile
from aiogram import Router
from aiogram.filters import BaseFilter, Command
from aiogram.types import Message
import whisper

# –ö–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
LANG_COMMANDS = {
    'ru': 'lang_ru',
    'en': 'lang_en',
    'cn': 'lang_cn'
}
# –ö–æ–¥—ã —è–∑—ã–∫–∞ –¥–ª—è whisper
WHISPER_LANG = {
    'ru': 'ru',
    'en': 'en',
    'cn': 'zh'
}

chat_lang = {}
router = Router()

# –ö—ç—à –º–æ–¥–µ–ª–∏ whisper
_whisper_model = None

def get_whisper_model():
    global _whisper_model
    if _whisper_model is None:
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        _whisper_model = whisper.load_model('tiny')
    return _whisper_model

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞
for code, cmd in LANG_COMMANDS.items():
    async def _set_lang(msg: Message, code=code):
        chat_lang[msg.chat.id] = code
        names = {'ru': '–†—É—Å—Å–∫–∏–π', 'en': 'English', 'cn': '‰∏≠Êñá'}
        await msg.answer(f"–Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {names[code]}")
    router.message(Command(cmd))(_set_lang)

class VoiceFilter(BaseFilter):
    async def __call__(self, msg: Message) -> bool:
        return bool(msg.voice)

@router.message(VoiceFilter())
async def voice_handler(msg: Message):
    lang = chat_lang.get(msg.chat.id, 'ru')

    # —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as tmp:
        await msg.bot.download(msg.voice.file_id, tmp.name)
        audio_path = tmp.name

    try:
        model = get_whisper_model()
        # —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        result = model.transcribe(audio_path, language=WHISPER_LANG.get(lang, 'en'))
        text = result.get('text', '').strip()
    except Exception as e:
        text = ''
    finally:
        try:
            os.remove(audio_path)
        except OSError:
            pass

    if not text:
        await msg.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
        return

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await msg.answer(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({lang}):\n{text}")
